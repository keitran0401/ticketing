## GENERAL
1. "ts-node": compile & execute TS files
   "tsc --init" command: creates TS config files
   "ts-node-dev": restarts target node when files change in dev env 
2. "~/.zshrc": open file and set "alias k="kubectl"" -> save time when 
  run command (k get pods instead of kubectl get pods)
3. "/etc/hosts": open file and set "127.0.0.1 ticketing.dev" -> set a 
  domain name to local host
4. Ingress-nginx: is a http server so Chrome does not trust -> type 
  "thisisunsafe" to Chrome to get over the error
5. Browsers and Postman have different ways to handle cookie & send 
  cookie's data back to the server. Supertest server does not manage 
  cookie automatically & it uses http (not https)
6. NextJS getInitialProps func can be executed on the client (using Axios)
  or server (using Kubernetes service reaching out to ingress-nginx)
7. Window object only exists inside the browser
8. Mongoose has built-in Database Transaction for handling transaction issues
9. Bulljs: Redis-based queue for Node. (Job scheduling) -> Cache worker service
10. Redis: in-memory data structure store, used as a database, cache, and message broker


## OS
Most OSs have a Kernel - a running software process 
that can access to any programs that are running and all
of the physical hardwares connected to the computer. The programs (like Chrome)
interact with the Kernel thru System Call
- Namespacing
- Control groups


## DOCKER
docker ps
docker build -t [image's name] . 
docker run [image's name]
docker push [image's name]
docker run -p [port on local host] : [port inside the container] [image's name]


## KUBERNETES
A tool for running a bunch of different containers & interacting with each other
1. CLuster is a set of different virtual machines (Nodes)
2. Master is a program to manage everything in the Cluster 

kubectl apply -f [pod/deployment_name]
kubectl get pods / deployments / secrets / services (in the default namespace) /namespace
kubectl delete pod / deployment [pod/deployment_name]


## NATS STREAMING SERVER (node-nats-streaming library)
- Event-based architecture & Callback infrastructure
- Stores all event in memory (default), or in MySQL / PostgreSQl
- Data shared must be in JSON format